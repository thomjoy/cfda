paste(1, '.csv', '')
paste(1, '.csv')
"a" + ".csv"
?paste
paste0(1, '.csv')
getmonitor <- function(id, directory, summary = FALSE ) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data <- read.csv(file.path(directory, paste0(id, '.csv')))
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if( summary == TRUE ) {
print(summary(data))
}
return(data)
## Your code here
}
a <- getmonitor('1', 'specdata', TRUE)
a <- getmonitor('1', '/specdata', TRUE)
a <- getmonitor('1', '/Users/thomjoy/code/cfda/specdata', TRUE)
ls(/Users/thomjoy/code/cfda/)
ls('/Users/thomjoy/code/cfda/')
ls('/Users/thom/code/cfda/')
ls('/Users/thom/code/cfda')
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
getmonitor.testscript()
getmonitor <- function(id, directory, summary = FALSE ) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data <- read.csv(file.path(directory, paste0(id, '.csv', sep = "", collapse)))
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if( summary == TRUE ) {
print(summary(data))
}
return(data)
## Your code here
}
getmonitor.testscript()
print(cwd())
print(getcwd())
getwd()
getmonitor <- function(id, directory, summary = FALSE ) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data <- read.csv(file.path(getwd(), directory, paste0(id, '.csv')))
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if( summary == TRUE ) {
print(summary(data))
}
return(data)
## Your code here
}
getmonitor.testscript()
getmonitor <- function(id, directory, summary = FALSE ) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data <- read.csv(file.path(getwd(), directory, paste(id, '.csv', sep = "")))
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if( summary == TRUE ) {
print(summary(data))
}
return(data)
## Your code here
}
getmonitor.testscript()
fix(getmonitor)
fix(getmonitor)
source('getmonitor.R')
fix(getmonitor)
source('getmonitor.R')
getmonitor.testscript()
getmonitor(002, 'specdata')
getmonitor('002', 'specdata')
as.numeric("1")
getmonitor <- function(id, directory, summary = FALSE ) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
id <- as.numeric(id)
if( id < 100 ) {
id <- paste('00', id);
}
file <- paste(id, '.csv', sep = "")
data <- read.csv(file.path(getwd(), directory, file))
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if( summary == TRUE ) {
print(summary(data))
}
return(data)
## Your code here
}
getmonitor.testscript()
source('getmonitor.R')
getmonitor.testscript()
source('getmonitor.R')
getmonitor.testscript()
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
complete('specdata')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
?rbind
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
?data.frame
nodata <- as.data.frame(setNames(replicate(5,numeric(0), simplify = F), letters[1:5]))
nodata
nodata <- as.data.frame(setNames(replicate(2,numeric(0), simplify = F), ['ID', 'nobs']))
nodata <- as.data.frame(setNames(replicate(2,numeric(0), simplify = F), [['ID'], ['nobs']]))
letters
source('complete.R')
source('complete.R')
source('complete.R')
letters
complete('specdata')
?setNames
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
complete('specdata')
source('complete.R')
complete('specdata')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
complete('specdata')
complete('specdata')
source('complete.R')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
source('complete.R')
complete('specdata')
head(df)
complete.testscript()
complete.testscript()
fix(complete.testscript)
complete('specdata', 24)
fix(complete.testscript)
sample(1:332, 10)
set.seed(42)
sample(1:332, 10)
fix(complete.testscript)
fix(complete.testscript)
source('complete.R')
complete.testscript()
source('corr.R')
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 100)
?corr
?cor
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
fix(corr.testscript)
cor(1:10, 2:20)
cor(1:10, 2:11)
cor(1:10, 1:11)
cor(1:10, 1:10)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
a <- vector()
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
source('corr.R')
corr('specdata', 0)
corr('specdata', 1)
corr('specdata', 1)
corr('specdata', 1)
source('corr.R')
corr('specdata', 1)
corr('specdata', 1)
if( 0 > 1 )
print('what')
source('corr.R')
corr('specdata', 1)
corr.testscript()
corr.testscript()
corr('specdata', 1)
corr.testscript()
source('corr.R')
corr.testscript()
corr.testscript()
fix(corr.testscript)
source('corr.R')
corr.testscript()
corr('specdata', 1)
source('corr.R')
corr('specdata', 1)
corr('specdata')
source('getmonitor.R')
source('corr.R')
corr('specdata', 1)
corr('specdata', 111)
fix(corr.testscript)
cr <- corr('specdata', 129)
cr
source('corr.R')
corr('specdata', 129)
source('corr.R')
corr('specdata', 129)
source('corr.R')
corr.testscript()
cr <- corr('specdata', 129)
head(cr)
source('corr.R')
cr <- corr('specdata', 129)
head(cr)
summary(cr)
summary(cr)
summary(cr)
head(cr)
source('corr.R')
cr <- corr('specdata', 129)
cr
corr.testscript()
fix(complete.testscript)
source('corr.R')
cr <- corr('specdata', 129)
corr.testscript()
source('corr.R')
cr <- corr('specdata', 129)
corr.testscript()
source('corr.R')
corr.testscript()
fix(corr.testscript)
outputfiles <- sprintf("corr-testoutput%d.txt", 1:3)
fix(corr.testscript)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
writeLines(as.character(out), outputfiles[1])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
cr
cr
source('corr.R')
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
fix(corr.testscript)
writeLines(as.character(out), outputfiles[1])
fix(corr.testscript)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
writeLines(as.character(out), outputfiles[2])
fix(corr.testscript)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
writeLines(as.character(c(n, round(cr, 4))), outputfiles[3])
setwd('/3')
setwd('/Users/thomjoy/code/cfda/')
setwd('/Users/thomjoy/code/cfda/3/')
getpwd()
getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv(file.path(getwd(), "outcome-of-care-measures.csv"), colClasses = "character")
outcome <- read.csv(file.path(getwd(), "outcome-of-care-measures.csv"), colClasses = "character")
View(nodata)
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
title('Heart Attack 30-day Death Rate')
title('')
title('Heart Attack 30-day Death Rate')
outcome[, 17] <- as.numeric(outcome[, 17])
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 23] <- as.numeric(outcome[, 23])
par(mfrow = c(3, 1))
hist(outcome[, 11])
hist(outcome[, 17])
hist(outcome[, 23])
title(main="30 day death rate", xlab="30 Day Death Rate")
par(mfrow = c(3, 1))
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(outcome[, 11])
hist(outcome[, 17])
hist(outcome[, 23])
table(outcome$State)
death <- outcome2[, 11]
death <- outcome[, 11]
state <- outcome$State
boxplot(death ~ state)
par(mfrow = c(1, 1)
boxplot(death ~ state)
par(mfrow = c(1, 1))
boxplot(death ~ state)
title(yaxis="30 Day Death Rate")
title(yax="30 Day Death Rate")
title(ylab="30 Day Death Rate")
title(ylab="30 Day Death Rate")
boxplot(death ~ state)
title(ylab="30 Day Death Rate")
title("Heart Attack 30-day Death Rate by State")
par(las=2)
par(las=4)
par(las=3)
par(las=1)
boxplot(death ~ state, las=2)
?boxplot
help
?median
median(outcome[, 11])
median(c(outcome[, 11], outcome[, 17])
)
median(outcome[, 11], true)
median(outcome[, 11], na.rm = TRUE)
boxplot(median(outcome[, 11], na.rm = TRUE)
)
boxplot(death ~ state, las=2, reorder=median(state))
heart_failure <- as.numeric(outcome)
outcome read.csv('outcome-of-care-measures.csv')
outcome <- read.csv('outcome-of-care-measures.csv')
heart_failure <- as.numeric(outcome[, 11])
heart_attack <- as.numeric(outcome[, 17])
death <- outcome[, 11]
state <- outcome$State
boxplot(death ~ state, las = 2, ylab = "30-day Death Rate")
boxplot(death ~ state, las = 2)
boxplot(death ~ state)
boxplot(death ~ state)
table(outcome$State)
outcome[outcome$State < 20]
outcome2 <- outcome[outcome$State < 20]
outcome2 <- outcome[as.numeric(outcome$State) < 20]
outcome2
table(outcome2)
outcome <- outcome[outcome$State < 20]
outcome <- outcome[outcome$State < 20]
cube <- function(x, n) { x^3 }
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
library(datasets)
data(iris)
?iris
slice <- $iris[iris$Species == 'virginica'
slice <- $iris[iris$Species == 'virginica']
str(idis)
str(iris)
slice <- $iris[iris$Species == virginica]
slice <- $iris[iris$Species = virginica]
slice <- iris[iris$Species == virginica]
slice <- iris[iris$Species == "virginica"]
slice <- iris$Species == "virginica"
slice
mean(slice)
mean(slice$Sepal.Length)
slice <- iris[iris$Species == "virginica"]
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
